{"ast":null,"code":"import { jsx as _jsx } from \"react/jsx-runtime\";\nimport { useCallback, useEffect, useReducer } from 'react';\nimport { useEthers } from '../../hooks';\nimport { NotificationsContext } from './context';\nimport { DEFAULT_NOTIFICATIONS } from './model';\nimport { notificationReducer } from './reducer';\nimport { nanoid } from 'nanoid';\nexport function NotificationsProvider(_ref) {\n  let {\n    children\n  } = _ref;\n  const [notifications, dispatch] = useReducer(notificationReducer, DEFAULT_NOTIFICATIONS);\n  const {\n    chainId,\n    account\n  } = useEthers();\n  useEffect(() => {\n    if (account && chainId) {\n      dispatch({\n        type: 'ADD_NOTIFICATION',\n        chainId: chainId,\n        notification: {\n          type: 'walletConnected',\n          id: nanoid(),\n          submittedAt: Date.now(),\n          address: account\n        }\n      });\n    }\n  }, [account, chainId]);\n  const addNotification = useCallback(_ref2 => {\n    let {\n      notification,\n      chainId\n    } = _ref2;\n    dispatch({\n      type: 'ADD_NOTIFICATION',\n      chainId,\n      notification: Object.assign(Object.assign({}, notification), {\n        id: nanoid()\n      })\n    });\n  }, [dispatch]);\n  const removeNotification = useCallback(_ref3 => {\n    let {\n      notificationId,\n      chainId\n    } = _ref3;\n    dispatch({\n      type: 'REMOVE_NOTIFICATION',\n      chainId,\n      notificationId\n    });\n  }, [dispatch]);\n  return _jsx(NotificationsContext.Provider, {\n    value: {\n      addNotification,\n      notifications,\n      removeNotification\n    },\n    children: children\n  });\n} //# sourceMappingURL=provider.js.map","map":null,"metadata":{},"sourceType":"module"}