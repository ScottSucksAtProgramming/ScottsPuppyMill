{"ast":null,"code":"import _asyncToGenerator from \"/Users/scottkostolni/Documents/Projects/Programming Projects/React Projects/ScottsPuppyMill/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport _regeneratorRuntime from \"/Users/scottkostolni/Documents/Projects/Programming Projects/React Projects/ScottsPuppyMill/node_modules/@babel/runtime/regenerator/index.js\";\nimport { useEthers } from './useEthers';\nimport { usePromiseTransaction } from './usePromiseTransaction';\n/**\n * @public\n */\n\nexport function useSendTransaction(options) {\n  var _useEthers = useEthers(),\n      library = _useEthers.library,\n      chainId = _useEthers.chainId;\n\n  var _usePromiseTransactio = usePromiseTransaction(chainId, options),\n      promiseTransaction = _usePromiseTransactio.promiseTransaction,\n      state = _usePromiseTransactio.state,\n      resetState = _usePromiseTransactio.resetState;\n\n  var sendTransaction = /*#__PURE__*/function () {\n    var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(transactionRequest) {\n      var signer;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              signer = (options === null || options === void 0 ? void 0 : options.signer) || (library === null || library === void 0 ? void 0 : library.getSigner());\n\n              if (!signer) {\n                _context.next = 4;\n                break;\n              }\n\n              _context.next = 4;\n              return promiseTransaction(signer.sendTransaction(transactionRequest));\n\n            case 4:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n\n    return function sendTransaction(_x) {\n      return _ref.apply(this, arguments);\n    };\n  }();\n\n  return {\n    sendTransaction: sendTransaction,\n    state: state,\n    resetState: resetState\n  };\n}","map":{"version":3,"mappings":";;AAEA,SAASA,SAAT,QAA0B,aAA1B;AACA,SAASC,qBAAT,QAAsC,yBAAtC;AAEA;;;;AAGA,OAAM,SAAUC,kBAAV,CAA6BC,OAA7B,EAAyD;AAC7D,mBAA6BH,SAAS,EAAtC;AAAA,MAAQI,OAAR,cAAQA,OAAR;AAAA,MAAiBC,OAAjB,cAAiBA,OAAjB;;AACA,8BAAkDJ,qBAAqB,CAACI,OAAD,EAAUF,OAAV,CAAvE;AAAA,MAAQG,kBAAR,yBAAQA,kBAAR;AAAA,MAA4BC,KAA5B,yBAA4BA,KAA5B;AAAA,MAAmCC,UAAnC,yBAAmCA,UAAnC;;AAEA,MAAMC,eAAe;AAAA,wEAAG,iBAAOC,kBAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAChBC,oBADgB,GACP,QAAO,SAAP,WAAO,WAAP,GAAO,MAAP,UAAO,CAAEA,MAAT,MAAmBP,OAAO,SAAP,WAAO,WAAP,GAAO,MAAP,UAAO,CAAEQ,SAAT,EAAnB,CADO;;AAAA,mBAElBD,MAFkB;AAAA;AAAA;AAAA;;AAAA;AAAA,qBAGdL,kBAAkB,CAACK,MAAM,CAACF,eAAP,CAAuBC,kBAAvB,CAAD,CAHJ;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAH;;AAAA,oBAAfD,eAAe;AAAA;AAAA;AAAA,KAArB;;AAOA,SAAO;AAAEA,mBAAe,EAAfA,eAAF;AAAmBF,SAAK,EAALA,KAAnB;AAA0BC,cAAU,EAAVA;AAA1B,GAAP;AACD","names":["useEthers","usePromiseTransaction","useSendTransaction","options","library","chainId","promiseTransaction","state","resetState","sendTransaction","transactionRequest","signer","getSigner"],"sources":["/Users/scottkostolni/Documents/Projects/Programming Projects/React Projects/ScottsPuppyMill/node_modules/@usedapp/core/src/hooks/useSendTransaction.ts"],"sourcesContent":["import { TransactionRequest } from '@ethersproject/abstract-provider'\nimport { TransactionOptions } from '../../src'\nimport { useEthers } from './useEthers'\nimport { usePromiseTransaction } from './usePromiseTransaction'\n\n/**\n * @public\n */\nexport function useSendTransaction(options?: TransactionOptions) {\n  const { library, chainId } = useEthers()\n  const { promiseTransaction, state, resetState } = usePromiseTransaction(chainId, options)\n\n  const sendTransaction = async (transactionRequest: TransactionRequest) => {\n    const signer = options?.signer || library?.getSigner()\n    if (signer) {\n      await promiseTransaction(signer.sendTransaction(transactionRequest))\n    }\n  }\n\n  return { sendTransaction, state, resetState }\n}\n"]},"metadata":{},"sourceType":"module"}