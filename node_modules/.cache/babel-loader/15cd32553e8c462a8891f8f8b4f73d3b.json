{"ast":null,"code":"import { jsx as _jsx } from \"react/jsx-runtime\";\nimport { useCallback, useEffect, useReducer, useState } from 'react';\nimport { NetworkContext } from './context';\nimport { defaultNetworkState, networksReducer } from './reducer';\nimport { Web3Provider, Provider } from '@ethersproject/providers';\nimport { subscribeToProviderEvents, getInjectedProvider } from '../../../helpers';\nimport { useConfig } from '../../config';\nimport { useLocalStorage } from '../../../hooks';\nimport detectEthereumProvider from '@metamask/detect-provider';\n\nasync function tryToGetAccount(provider) {\n  try {\n    return await provider.getSigner().getAddress();\n  } catch (err) {\n    if (err.code === 'UNSUPPORTED_OPERATION') {\n      // readonly provider\n      return undefined;\n    }\n\n    throw err;\n  }\n}\n/**\n * @internal Intended for internal use - use it on your own risk\n */\n\n\nexport function NetworkProvider(_ref) {\n  let {\n    children,\n    providerOverride\n  } = _ref;\n  const {\n    autoConnect,\n    pollingInterval\n  } = useConfig();\n  const [network, dispatch] = useReducer(networksReducer, defaultNetworkState);\n  const [onUnsubscribe, setOnUnsubscribe] = useState(() => () => undefined);\n  const [shouldConnectMetamask, setShouldConnectMetamask] = useLocalStorage('shouldConnectMetamask');\n  const [isLoading, setLoading] = useState(false);\n  const activateBrowserWallet = useCallback(async () => {\n    setLoading(true);\n    const injectedProvider = await getInjectedProvider(pollingInterval);\n\n    if (!injectedProvider) {\n      reportError(new Error('No injected provider available'));\n      setLoading(false);\n      return;\n    }\n\n    try {\n      await injectedProvider.send('eth_requestAccounts', []);\n      setShouldConnectMetamask(true);\n    } catch (err) {\n      reportError(err);\n      setShouldConnectMetamask(false);\n      throw err;\n    } finally {\n      setLoading(false);\n    }\n\n    return activate(injectedProvider);\n  }, []);\n  useEffect(() => {\n    if (providerOverride) {\n      void activate(providerOverride);\n    }\n  }, [providerOverride]);\n  const update = useCallback(newNetwork => {\n    dispatch({\n      type: 'UPDATE_NETWORK',\n      network: newNetwork\n    });\n  }, [network]);\n  const reportError = useCallback(error => {\n    console.error(error);\n    dispatch({\n      type: 'ADD_ERROR',\n      error\n    });\n  }, []);\n  const deactivate = useCallback(() => {\n    setShouldConnectMetamask(false);\n    update({\n      accounts: []\n    });\n  }, []);\n  const onDisconnect = useCallback(error => {\n    deactivate();\n    reportError(error);\n  }, []);\n  useEffect(() => {\n    setTimeout(async () => {\n      var _a, _b, _c;\n\n      try {\n        if (shouldConnectMetamask && autoConnect && !providerOverride) {\n          await detectEthereumProvider(); // If window.ethereum._state.accounts is non null but has no items,\n          // it probably means that the user has disconnected Metamask manually.\n\n          if (shouldConnectMetamask && ((_c = (_b = (_a = window.ethereum) === null || _a === void 0 ? void 0 : _a._state) === null || _b === void 0 ? void 0 : _b.accounts) === null || _c === void 0 ? void 0 : _c.length) === 0) {\n            return;\n          }\n\n          await activateBrowserWallet();\n        }\n      } catch (err) {\n        console.warn(err);\n      }\n    });\n  }, [shouldConnectMetamask, autoConnect, providerOverride]);\n  const activate = useCallback(async provider => {\n    var _a;\n\n    const wrappedProvider = Provider.isProvider(provider) ? provider : new Web3Provider(provider);\n\n    try {\n      setLoading(true);\n      const account = await tryToGetAccount(wrappedProvider);\n      const chainId = (_a = await wrappedProvider.getNetwork()) === null || _a === void 0 ? void 0 : _a.chainId;\n      onUnsubscribe();\n      const clearSubscriptions = subscribeToProviderEvents(wrappedProvider.provider, update, onDisconnect);\n      setOnUnsubscribe(() => clearSubscriptions);\n      update({\n        provider: wrappedProvider,\n        chainId,\n        accounts: account ? [account] : []\n      });\n    } catch (err) {\n      reportError(err);\n      throw err;\n    } finally {\n      setLoading(false);\n    }\n  }, [onUnsubscribe]);\n  return _jsx(NetworkContext.Provider, {\n    value: {\n      network,\n      update,\n      activate,\n      deactivate,\n      reportError,\n      activateBrowserWallet,\n      isLoading\n    },\n    children: children\n  });\n} //# sourceMappingURL=provider.js.map","map":null,"metadata":{},"sourceType":"module"}