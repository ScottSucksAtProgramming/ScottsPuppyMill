{"ast":null,"code":"import { useContext, useEffect, useMemo } from 'react';\nimport { MultiChainStatesContext } from '../providers';\n/**\n * A low-level function that makes multiple calls to specific methods of specific contracts and returns values or error if present.\n * The hook will cause the component to refresh when values change.\n *\n * Calls will be combined into a single multicall across all uses of useChainCall, useChainCalls, useRawCall and useRawCalls.\n * It is recommended to use useCalls where applicable instead of this method.\n * @param calls List of calls, also see {@link ChainCall}. Calls need to be in the same order across component renders.\n * @returns\n */\n\nexport function useRawCalls(calls) {\n  const {\n    dispatchCalls,\n    chains\n  } = useContext(MultiChainStatesContext);\n  useEffect(() => {\n    const filteredCalls = calls.filter(Boolean);\n    dispatchCalls({\n      type: 'ADD_CALLS',\n      calls: filteredCalls\n    });\n    return () => dispatchCalls({\n      type: 'REMOVE_CALLS',\n      calls: filteredCalls\n    });\n  }, [JSON.stringify(calls), dispatchCalls]);\n  return useMemo(() => calls.map(call => {\n    return call ? extractCallResult(chains, call) : undefined;\n  }), [JSON.stringify(calls), chains]);\n}\n/**\n * A low-level function that makes a call to a specific method of a specific contract and returns the value or error if present.\n * The hook will cause the component to refresh whenever a new block is mined and the value is changed.\n *\n * Calls will be combined into a single multicall across all uses of useChainCall, useChainCalls, useRawCall and useRawCalls.\n * It is recommended to use useCall where applicable instead of this method.\n *\n * @param call a single call, also see {@link RawCall}.\n *             A call can be Falsy, as it is important to keep the same ordering of hooks even if in a given render cycle\n *             and there might be not enough information to perform a call.\n * @returns result of multicall call.\n */\n\nexport function useRawCall(call) {\n  return useRawCalls([call])[0];\n}\n\nfunction extractCallResult(chains, call) {\n  var _a, _b, _c, _d;\n\n  const chainId = call.chainId;\n  return chainId !== undefined ? (_d = (_c = (_b = (_a = chains[chainId]) === null || _a === void 0 ? void 0 : _a.value) === null || _b === void 0 ? void 0 : _b.state) === null || _c === void 0 ? void 0 : _c[call.address.toLowerCase()]) === null || _d === void 0 ? void 0 : _d[call.data] : undefined;\n} //# sourceMappingURL=useRawCalls.js.map","map":null,"metadata":{},"sourceType":"module"}