{"ast":null,"code":"import { useMemo } from 'react';\nimport { useRawCalls } from './useRawCalls';\nimport { decodeCallResult, encodeCallData } from '../helpers';\nimport { useChainId } from './useChainId';\n/**\n * Makes a call to a specific method of a specific contract and returns the value or an error if present.\n * The hook will cause the component to refresh when a new block is mined and the return value changes.\n * A syntax sugar for useRawCall that uses ABI, function name, and arguments instead of raw data.\n * If typechain contract is used in call parameter then method name and arguments will be type checked.\n * Result will be typed as well.\n *\n * @param call a single call to a contract , also see {@link Call}\n * @returns The hook returns {@link CallResult} type.\n *          That is: undefined when call didn't return yet or a object { value | error } if it did,\n *          value: any[] | undefined - array of results or undefined if error occurred,\n *          error: Error | undefined - encountered error or undefined if call was successful.\n */\n\nexport function useCall(call) {\n  let queryParams = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  return useCalls([call], queryParams)[0];\n}\n/**\n * Makes calls to specific methods of specific contracts and returns values or an error if present.\n * The hook will cause the component to refresh when a new block is mined and the return values change.\n * A syntax sugar for useRawCalls that uses ABI, function name, and arguments instead of raw data.\n * @param calls a list of contract calls , also see {@link Call}.\n * @param queryParams see {@link QueryParams}.\n * @returns a list of results (see {@link CallResult} in {@link useCall} above).\n */\n\nexport function useCalls(calls) {\n  let queryParams = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  const chainId = useChainId({\n    queryParams\n  });\n  const {\n    isStatic\n  } = queryParams;\n  const rawCalls = useMemo(() => calls.map(call => chainId !== undefined ? encodeCallData(call, chainId, isStatic) : undefined), [JSON.stringify(calls.map(call => call && {\n    address: call.contract.address.toLowerCase(),\n    method: call.method,\n    args: call.args\n  })), chainId]);\n  const results = useRawCalls(rawCalls);\n  return useMemo(() => results.map((result, idx) => decodeCallResult(calls[idx], result)), [results]);\n} //# sourceMappingURL=useCall.js.map","map":null,"metadata":{},"sourceType":"module"}