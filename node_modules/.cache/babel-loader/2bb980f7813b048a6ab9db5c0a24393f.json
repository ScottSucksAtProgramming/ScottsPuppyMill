{"ast":null,"code":"import { BigNumber } from '@ethersproject/bignumber';\n/**\n * @public\n */\n\nexport class CurrencyValue {\n  constructor(currency, value) {\n    this.currency = currency;\n    this.value = value;\n  }\n\n  static fromString(currency, value) {\n    return new CurrencyValue(currency, BigNumber.from(value));\n  }\n\n  static zero(currency) {\n    return new CurrencyValue(currency, BigNumber.from(0));\n  }\n\n  toString() {\n    return this.value.toString();\n  }\n\n  format() {\n    let overrideOptions = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    return this.currency.format(this.value.toString(), overrideOptions);\n  }\n\n  checkCurrency(other) {\n    if (this.currency !== other.currency) {\n      throw new TypeError(`Currency mismatch ${this.currency.ticker} != ${other.currency.ticker}`);\n    }\n  }\n\n  map(fn) {\n    return new CurrencyValue(this.currency, fn(this.value));\n  }\n\n  add(other) {\n    this.checkCurrency(other);\n    return this.map(x => x.add(other.value));\n  }\n\n  sub(other) {\n    this.checkCurrency(other);\n    return this.map(x => x.sub(other.value));\n  }\n\n  mul(value) {\n    return this.map(x => x.mul(value));\n  }\n\n  div(value) {\n    return this.map(x => x.div(value));\n  }\n\n  mod(value) {\n    return this.map(x => x.mod(value));\n  }\n\n  equals(other) {\n    return this.currency === other.currency && this.value.eq(other.value);\n  }\n\n  lt(other) {\n    this.checkCurrency(other);\n    return this.value.lt(other.value);\n  }\n\n  lte(other) {\n    this.checkCurrency(other);\n    return this.value.lte(other.value);\n  }\n\n  gt(other) {\n    this.checkCurrency(other);\n    return this.value.gt(other.value);\n  }\n\n  gte(other) {\n    this.checkCurrency(other);\n    return this.value.gte(other.value);\n  }\n\n  isZero() {\n    return this.value.isZero();\n  }\n\n} //# sourceMappingURL=CurrencyValue.js.map","map":null,"metadata":{},"sourceType":"module"}