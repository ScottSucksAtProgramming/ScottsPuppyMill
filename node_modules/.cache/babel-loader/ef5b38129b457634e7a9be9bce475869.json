{"ast":null,"code":"import { useCallback, useState } from 'react';\nimport { useNotificationsContext, useTransactionsContext } from '../providers';\nimport { errors } from 'ethers';\n\nconst isDroppedAndReplaced = e => (e === null || e === void 0 ? void 0 : e.code) === errors.TRANSACTION_REPLACED && (e === null || e === void 0 ? void 0 : e.replacement) && ((e === null || e === void 0 ? void 0 : e.reason) === 'repriced' || (e === null || e === void 0 ? void 0 : e.cancelled) === false);\n\nexport function usePromiseTransaction(chainId, options) {\n  const [state, setState] = useState({\n    status: 'None'\n  });\n  const {\n    addTransaction\n  } = useTransactionsContext();\n  const {\n    addNotification\n  } = useNotificationsContext();\n  const resetState = useCallback(() => {\n    setState({\n      status: 'None'\n    });\n  }, [setState]);\n  const promiseTransaction = useCallback(async transactionPromise => {\n    var _a, _b, _c, _d, _e, _f;\n\n    if (!chainId) return;\n    let transaction = undefined;\n\n    try {\n      setState({\n        status: 'PendingSignature',\n        chainId\n      });\n      transaction = await transactionPromise;\n      setState({\n        transaction,\n        status: 'Mining',\n        chainId\n      });\n      addTransaction({\n        transaction: Object.assign(Object.assign({}, transaction), {\n          chainId: chainId\n        }),\n        submittedAt: Date.now(),\n        transactionName: options === null || options === void 0 ? void 0 : options.transactionName\n      });\n      const receipt = await transaction.wait();\n      setState({\n        receipt,\n        transaction,\n        status: 'Success',\n        chainId\n      });\n      return receipt;\n    } catch (e) {\n      const errorMessage = (_e = (_c = (_b = (_a = e.error) === null || _a === void 0 ? void 0 : _a.message) !== null && _b !== void 0 ? _b : e.reason) !== null && _c !== void 0 ? _c : (_d = e.data) === null || _d === void 0 ? void 0 : _d.message) !== null && _e !== void 0 ? _e : e.message;\n\n      if (transaction) {\n        const droppedAndReplaced = isDroppedAndReplaced(e);\n\n        if (droppedAndReplaced) {\n          const status = e.receipt.status === 0 ? 'Fail' : 'Success';\n          const type = status === 'Fail' ? 'transactionFailed' : 'transactionSucceed';\n          addNotification({\n            notification: {\n              type,\n              submittedAt: Date.now(),\n              transaction: e.replacement,\n              receipt: e.receipt,\n              transactionName: (_f = e.replacement) === null || _f === void 0 ? void 0 : _f.transactionName,\n              originalTransaction: transaction\n            },\n            chainId\n          });\n          setState({\n            status,\n            transaction: e.replacement,\n            originalTransaction: transaction,\n            receipt: e.receipt,\n            errorMessage,\n            chainId\n          });\n        } else {\n          setState({\n            status: 'Fail',\n            transaction,\n            receipt: e.receipt,\n            errorMessage,\n            chainId\n          });\n        }\n      } else {\n        setState({\n          status: 'Exception',\n          errorMessage,\n          chainId\n        });\n      }\n\n      return undefined;\n    }\n  }, [chainId, setState, addTransaction, options]);\n  return {\n    promiseTransaction,\n    state,\n    resetState\n  };\n} //# sourceMappingURL=usePromiseTransaction.js.map","map":null,"metadata":{},"sourceType":"module"}