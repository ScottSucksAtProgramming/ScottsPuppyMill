{"ast":null,"code":"import { MultiCallABI } from '../constants';\nimport { BigNumber } from '@ethersproject/bignumber';\nimport { useMulticallAddress } from './useMulticallAddress';\nimport { useRawCall } from './useRawCalls';\nimport { useChainId } from './useChainId';\nconst GET_CURRENT_BLOCK_TIMESTAMP_CALL = MultiCallABI.encodeFunctionData('getCurrentBlockTimestamp', []);\nconst GET_CURRENT_BLOCK_DIFFICULTY_CALL = MultiCallABI.encodeFunctionData('getCurrentBlockDifficulty', []);\n/**\n * Queries block metadata.\n * @public\n */\n\nexport function useBlockMeta() {\n  let queryParams = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  const chainId = useChainId({\n    queryParams\n  });\n  const address = useMulticallAddress(queryParams);\n  const timestamp = useRawCall(address && chainId !== undefined && {\n    address,\n    data: GET_CURRENT_BLOCK_TIMESTAMP_CALL,\n    chainId\n  });\n  const difficulty = useRawCall(address && chainId !== undefined && {\n    address,\n    data: GET_CURRENT_BLOCK_DIFFICULTY_CALL,\n    chainId\n  });\n  return {\n    timestamp: timestamp !== undefined ? new Date(BigNumber.from(timestamp.value).mul(1000).toNumber()) : undefined,\n    difficulty: difficulty !== undefined ? BigNumber.from(difficulty.value) : undefined\n  };\n} //# sourceMappingURL=useBlockMeta.js.map","map":null,"metadata":{},"sourceType":"module"}