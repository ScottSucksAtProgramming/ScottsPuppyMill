{"ast":null,"code":"import { getAddress } from 'ethers/lib/utils';\nimport { validateArguments } from '../helpers/validateArgument';\nimport { useConfig, useNetwork } from '../providers';\nimport { useReadonlyNetwork } from './useReadonlyProvider';\n/**\n * @public\n */\n\nexport function useEthers() {\n  const {\n    network: {\n      provider: networkProvider,\n      chainId,\n      accounts,\n      errors\n    },\n    deactivate,\n    activate,\n    activateBrowserWallet,\n    isLoading\n  } = useNetwork();\n  const {\n    networks\n  } = useConfig();\n  const supportedChainIds = networks === null || networks === void 0 ? void 0 : networks.map(network => network.chainId);\n  const isUnsupportedChainId = chainId && supportedChainIds && supportedChainIds.indexOf(chainId) < 0;\n  const unsupportedChainIdError = new Error(`Unsupported chain id: ${chainId}. Supported chain ids are: ${supportedChainIds}.`);\n  unsupportedChainIdError.name = 'UnsupportedChainIdError';\n  const error = isUnsupportedChainId ? unsupportedChainIdError : errors[errors.length - 1];\n  const readonlyNetwork = useReadonlyNetwork();\n  const provider = networkProvider !== null && networkProvider !== void 0 ? networkProvider : readonlyNetwork === null || readonlyNetwork === void 0 ? void 0 : readonlyNetwork.provider;\n\n  const switchNetwork = async chainId => {\n    validateArguments({\n      chainId\n    }, {\n      chainId: 'number'\n    });\n\n    if (!provider) {\n      throw new Error('Provider not connected.');\n    }\n\n    await provider.send('wallet_switchEthereumChain', [{\n      chainId: `0x${chainId.toString(16)}`\n    }]);\n  };\n\n  const account = accounts[0] ? getAddress(accounts[0]) : undefined;\n  return {\n    connector: undefined,\n    library: provider,\n    chainId: isUnsupportedChainId ? undefined : networkProvider !== undefined ? chainId : readonlyNetwork === null || readonlyNetwork === void 0 ? void 0 : readonlyNetwork.chainId,\n    account,\n    active: !!provider,\n    activate: async providerOrConnector => {\n      if ('getProvider' in providerOrConnector) {\n        console.warn('Using web3-react connectors is deprecated and may lead to unexpected behavior.');\n        await providerOrConnector.activate();\n        return activate(await providerOrConnector.getProvider());\n      }\n\n      return activate(providerOrConnector);\n    },\n    activateBrowserWallet,\n    deactivate,\n    setError: () => {\n      throw new Error('setError is deprecated');\n    },\n    error,\n    isLoading,\n    switchNetwork\n  };\n} //# sourceMappingURL=useEthers.js.map","map":null,"metadata":{},"sourceType":"module"}