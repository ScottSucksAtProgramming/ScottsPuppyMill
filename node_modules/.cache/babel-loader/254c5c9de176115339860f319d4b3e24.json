{"ast":null,"code":"import { useEffect, useState } from 'react'; // modified from https://usehooks.com/useDebounce/\n\n/**\n * @internal Intended for internal use - use it on your own risk\n */\n\nexport function useDebounce(value, delay) {\n  const [debouncedValue, setDebouncedValue] = useState(value);\n  useEffect(() => {\n    // Update debounced value after delay\n    const handler = setTimeout(() => {\n      setDebouncedValue(value);\n    }, delay); // Cancel the timeout if value changes (also on delay change or unmount)\n    // This is how we prevent debounced value from updating if value is changed ...\n    // .. within the delay period. Timeout gets cleared and restarted.\n\n    return () => {\n      clearTimeout(handler);\n    };\n  }, [value, delay]);\n  return debouncedValue;\n} //# sourceMappingURL=useDebounce.js.map","map":null,"metadata":{},"sourceType":"module"}